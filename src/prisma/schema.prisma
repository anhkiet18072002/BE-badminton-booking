// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  binaryTargets = ["native", "linux-musl"]
  provider      = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String @unique
  email    String @unique
  password String

  user         User?
  accountRoles AccountRole[]

  @@map("accounts")
}

model Role {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  key         String  @unique
  description String?

  accountRoles    AccountRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  key String @unique

  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role   Role   @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roleId String @db.ObjectId

  permission   Permission @relation(fields: [permissionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  permissionId String     @db.ObjectId

  @@unique([roleId, permissionId])
  @@map("role_feature_permissions")
}

model AccountRole {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account   Account @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  accountId String  @db.ObjectId

  role   Role   @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roleId String @db.ObjectId

  @@unique([accountId, roleId])
  @@map("account_roles")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName  String
  lastName   String
  middleName String?

  startDate DateTime
  endDate   DateTime?

  account   Account @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  accountId String  @unique @db.ObjectId

  bookings Booking[]

  @@map("users")
}

model Court {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String  @unique
  location String?

  bookings Booking[]

  @@map("courts")
}

enum BookingType {
  regular
  temporary
}

model Booking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String @db.ObjectId

  court   Court  @relation(fields: [courtId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  courtId String @db.ObjectId

  date      DateTime
  startTime DateTime
  endTime   DateTime

  type BookingType

  @@unique([courtId, date, startTime, endTime])
  @@map("bookings")
}
